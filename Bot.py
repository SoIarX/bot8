from aiogram import Bot, types, asyncio
from aiogram.dispatcher import Dispatcher
from aiogram.utils import executor
from aiogram.dispatcher.filters import Command
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import StatesGroup, State
from aiogram.contrib.fsm_storage.memory import MemoryStorage
import logging
import sqlite3

conn = sqlite3.connect("database.db")
c = conn.cursor()


from Config import TOKEN
from db import Database
import Config as cfg
import Keyboard
import check_sub as csc


bot = Bot(token=TOKEN)
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)
db = Database('database.db')

logging.basicConfig(format=u'%(filename)s [LINE:%(lineno)d] #%(levelname)-8s [%(asctime)s]  %(message)s',
                    level=logging.INFO,
                    )
 
 
class vuvod(StatesGroup):
    amount = State()
    addres = State()
    
class dialog(StatesGroup):
  spam = State()
  blacklist = State()
  whitelist = State()
  setbln = State()
  newbln = State()

      
@dp.message_handler(content_types=['text'], text='üó£Ô∏è –†–∞—Å—Å—ã–ª–∫–∞')
async def spam(message: types.Message):
    ###
    user_id = message.from_user.id
    adm = db.adm_or_no(user_id)
    if adm == 1:
        ###
        await dialog.spam.set()
        await message.answer("–ù–∞–ø–∏—à–∏ —Ç–µ–∫—Å—Ç —Ä–∞—Å—Å—ã–ª–∫–∏", reply_markup=Keyboard.back)

@dp.message_handler(state=dialog.spam)
async def start_spam(message: types.Message, state: FSMContext):
  if message.text == '–ù–∞–∑–∞–¥':
    await message.answer("–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", reply_markup=Keyboard.admin)
    await state.finish()
  else:
    users = db.get_users()
    for row in users:
      try:
        await bot.send_message(row[0], message.text)
        await state.finish()
        if int(row[1]) != 1:
          db.set_active(row[0], 1)
          await asyncio.sleep(0.4)
      except:
        db.set_active(row[0], 0)
        await state.finish()
        await asyncio.sleep(0.4)
        
      await bot.send_message(message.from_user.id, "–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞", reply_markup=Keyboard.admin)


                    
@dp.message_handler(commands=['start'])
async def process_start_command(message: types.Message):
  user_id = message.from_user.id
  if not db.exists_user(user_id):
            start_command = message.text
            referrer_id = str(start_command[7:])
            if str(referrer_id) != "":
                  if str(referrer_id) != str(user_id):
                      db.add_user(user_id, referrer_id)
                      await message.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å", reply_markup=Keyboard.start, parse_mode='Markdown')
                      try:
                          await bot.send_message(referrer_id, "–£ –í–∞—Å –Ω–æ–≤—ã–π —Ä–µ—Ñ–µ—Ä–∞–ª!\n–í—ã –ø–æ–ª—É—á–∏–ª–∏ 0.50‚ÇΩ")
                          balance = c.execute("SELECT balance FROM users WHERE user_id=?", (referrer_id,)).fetchone()[0]
                          addnewam = balance + 0.5
                          c.execute("UPDATE users SET balance=? WHERE user_id=?", (addnewam, referrer_id,))
                          conn.commit()
                      except:
                          pass
                  else:
                      db.add_user(user_id)
                      await bot.send_message(message.from_user.id, '–ù–µ–ª—å–∑—è —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –ø–æ —Å–≤–æ–µ–π —Å—Å—ã–ª–∫–µ!')
            else:
                db.add_user(user_id)
                await message.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å", reply_markup=Keyboard.start, parse_mode='Markdown')
  else:
        await message.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å", reply_markup=Keyboard.start, parse_mode='Markdown') 
    
    
    
@dp.message_handler(commands=['adminp'])
async def process_admin_command(message: types.Message):
  ###
  user_id = message.from_user.id
  adm = db.adm_or_no(user_id)
  if adm == 1:
    ###
    await message.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å\n–ß—Ç–æ–±—ã –≤—ã–π—Ç–∏ –ø—Ä–æ–ø–∏—à–∏—Ç–µ /start", reply_markup=Keyboard.admin)
  else:
    pass




@dp.message_handler(text='üëª –ó–∞—Ä–∞–±–æ—Ç–∞—Ç—å')
async def process_zarabotat_btn(message: types.Message):
    user_id = message.from_user.id
    block = c.execute("SELECT block FROM users WHERE user_id = ?", (user_id,)).fetchone()[0]
    if block == 0:
      if await csc.check_sub_channels(cfg.CHANNELS, message.from_user.id):
          await bot.send_message(message.from_user.id, f'üí∏ –ü–∞—Ä—Ç–Ω—ë—Ä—Å–∫–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞ - —Å–∞–º—ã–π —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω—ã–π —Å–ø–æ—Å–æ–± –∑–∞—Ä–∞–±–æ—Ç–∞—Ç—å!\n\nüçá –ü—Ä–∏–≥–ª–∞—à–∞–π –¥—Ä—É–∑–µ–π –∏ –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞–π, –∑–∞ –∫–∞–∂–¥–æ–≥–æ –¥—Ä—É–≥–∞ 0.50‚ÇΩ\n\nüîó –¢–≤–æ—è —Å—Å—ã–ª–∫–∞ –¥–ª—è –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–π: https://t.me/{cfg.BOT_NICKNAME}?start={message.from_user.id}')
      else:
          await bot.send_message(message.from_user.id, cfg.NOT_SUB_MSG, reply_markup=Keyboard.keyboard)
    else:
        await message.answer("–¢—ã –±—ã–ª –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –≤ –±–æ—Ç–µ")

    
    
  
@dp.message_handler(text='üíö –ü—Ä–æ—Ñ–∏–ª—å')
async def process_profile_btn(message: types.Message):
  user_id = message.from_user.id
  block = c.execute("SELECT block FROM users WHERE user_id = ?", (user_id,)).fetchone()[0]
  if block == 0:
      if await csc.check_sub_channels(cfg.CHANNELS, message.from_user.id):
         user_id = message.from_user.id
         count_referals = c.execute("SELECT COUNT('id') as count FROM users WHERE referrer_id=?", (user_id,)).fetchone()[0]
         balance = c.execute("SELECT balance FROM users WHERE user_id=?", (user_id,)).fetchone()[0]
         await message.answer(f"üÜî ID: {message.from_user.id}\n==========================\nüì≠ –î–æ—Å—Ç—É–ø–Ω–æ –¥–ª—è –≤—ã–≤–æ–¥–∞: {balance}‚ÇΩ\nüëî –í—Å–µ–≥–æ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤: {count_referals} —á–µ–ª–æ–≤–µ–∫\n==========================", reply_markup=Keyboard.vivod, parse_mode='Markdown')
      else:
         await bot.send_message(message.from_user.id, cfg.NOT_SUB_MSG, reply_markup=Keyboard.keyboard)
  else:
        await message.answer("–¢—ã –±—ã–ª –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –≤ –±–æ—Ç–µ")
  
  
  
  
@dp.message_handler(text='üí® –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è')
async def process_profile_btn(message: types.Message):
  user_id = message.from_user.id
  block = c.execute("SELECT block FROM users WHERE user_id = ?", (user_id,)).fetchone()[0]
  if block == 0:
      if await csc.check_sub_channels(cfg.CHANNELS, message.from_user.id):
          usr_count = c.execute("SELECT COUNT (*) as count FROM users").fetchall()[0][0]
          await message.answer(f'üí® –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø—Ä–æ–µ–∫—Ç–∞:\nüë®‚Äçüíª –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –ø—Ä–æ–µ–∫—Ç–µ: {usr_count}\nüïê –°—Ç–∞—Ä—Ç –±–æ—Ç–∞ –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω 20.11.2022', reply_markup=Keyboard.infoya, parse_mode='Markdown')
      else:
          await bot.send_message(message.from_user.id, cfg.NOT_SUB_MSG, reply_markup=Keyboard.keyboard)
  else:
        await message.answer("–¢—ã –±—ã–ª –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –≤ –±–æ—Ç–µ")
  
  
  
@dp.callback_query_handler(text_contains='vuvud')
async def test(call: types.CallbackQuery, state: FSMContext):
  user_id = call.from_user.id
  balance = c.execute("SELECT balance FROM users WHERE user_id=?", (user_id,)).fetchone()[0]
  if balance >= 2.0:
    await bot.answer_callback_query(call.id)
    await bot.send_message(call.from_user.id, f'–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –≤—ã–≤–æ–¥–∞\n–£ –í–∞—Å –Ω–∞ –±–∞–ª–∞–Ω—Å–µ: {balance}')
        
    await vuvod.amount.set()
        
  else:
    await bot.send_message(call.from_user.id, '–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –≤—ã–ø–ª–∞—Ç—ã 2‚ÇΩ')
    


@dp.message_handler(state=vuvod.amount)                                # –ö–∞–∫ —Ç–æ–ª—å–∫–æ –±–æ—Ç –ø–æ–ª—É—á–∏—Ç –æ—Ç–≤–µ—Ç, –≤–æ—Ç —ç—Ç–æ –≤—ã–ø–æ–ª–Ω–∏—Ç—Å—è
async def amount_q1(message: types.Message, state: FSMContext):
  aamm = message.text
  user_id = message.from_user.id
  balance = c.execute("SELECT balance FROM users WHERE user_id=?", (user_id,)).fetchone()[0]
  if balance - (float(aamm)) >= 0:
                await state.update_data(aamount=aamm)
                await message.answer('–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π payeer –∫–æ—à–µ–ª–µ–∫ –≤ —Ñ–æ—Ä–º–∞—Ç–µ P123456789:')
                await vuvod.addres.set()
  else:
      await message.answer('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤!')
      await state.finish()


@dp.message_handler(state=vuvod.addres)
async def addres_q2(message: types.Message, state: FSMContext):
  aad = message.text
  await state.update_data(aaddres=aad)
  data = await state.get_data()
  aamount = data.get("aamount")
  aaddres = data.get("aaddres")
  user_id = message.from_user.id
  await bot.send_message(5639323398, f'–Æ–∑–µ—Ä–Ω–µ–π–º: @{message.from_user.username}\n–ê–π–¥–∏: {user_id}\n–°—É–º–º–∞: {aamount}\nPayeer: {aaddres}', reply_markup=Keyboard.msg_del)
  balance = c.execute("SELECT balance FROM users WHERE user_id=?", (user_id,)).fetchone()[0]
  newblnc = balance - (float(aamount))
  c.execute("UPDATE users SET balance=? WHERE user_id=?", (newblnc, user_id))
  conn.commit()
  await message.answer('–û–∂–∏–¥–∞–π—Ç–µ, —Å—Ä–µ–¥—Å—Ç–≤–∞ –ø–æ—Å—Ç—É–ø—è—Ç –Ω–∞ –≤–∞—à–∏ —Ä–µ–∫–≤–µ–∑–∏—Ç—ã –≤ —Ç–µ—á–µ–Ω–∏–∏ 48 —á–∞—Å–æ–≤!')
  await state.finish()
  
  
  
@dp.callback_query_handler(text_contains='msg_d')
async def test_call(callback_query: types.CallbackQuery):
  await callback_query.message.delete()
  

@dp.message_handler(content_types=['text'],text='üîí –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è')
async def banusr(message: types.Message):
    user_id = message.from_user.id
    adm = db.adm_or_no(user_id)
    if adm == 1:
        await dialog.blacklist.set()
        await message.answer("–í–≤–µ–¥–∏—Ç–µ id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", reply_markup=Keyboard.back)

@dp.message_handler(state=dialog.blacklist)
async def start_spam(message: types.Message, state: FSMContext):
  if message.text == '–ù–∞–∑–∞–¥':
    await message.answer("–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", reply_markup=Keyboard.admin)
    await state.finish()
  else:
      user_id = message.text
      try:
          db.ban(user_id)
          await message.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω", reply_markup=Keyboard.admin)
          await state.finish()
      except ValueError:
          await message.answer("–í–≤–µ–¥–∏—Ç–µ –∞–π–¥–∏ —Ü–∏—Ñ—Ä–∞–º–∏", reply_markup=Keyboard.admin)
          await state.finish()
         
@dp.message_handler(content_types=['text'],text='üîì –†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è')
async def banusr(message: types.Message):
    user_id = message.from_user.id
    adm = db.adm_or_no(user_id)
    if adm == 1:
        await dialog.whitelist.set()
        await message.answer("–í–≤–µ–¥–∏—Ç–µ id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", reply_markup=Keyboard.back)

@dp.message_handler(state=dialog.whitelist)
async def start_spam(message: types.Message, state: FSMContext):
  if message.text == '–ù–∞–∑–∞–¥':
    await message.answer("–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", reply_markup=Keyboard.admin)
    await state.finish()
  else:
      user_id = message.text
      try:
          db.unban(user_id)
          await message.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω", reply_markup=Keyboard.admin)
          await state.finish()
      except ValueError:
          await message.answer("–í–≤–µ–¥–∏—Ç–µ –∞–π–¥–∏ —Ü–∏—Ñ—Ä–∞–º–∏", reply_markup=Keyboard.admin)
          await state.finish()
          
@dp.message_handler(content_types=['text'],text='–ò–∑–º–µ–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é')
async def setblnc(message: types.Message):
    user_id = message.from_user.id
    adm = db.adm_or_no(user_id)
    if adm == 1:
        await dialog.setbln.set()
        await message.answer("–í–≤–µ–¥–∏—Ç–µ id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", reply_markup=Keyboard.back)
        
@dp.message_handler(state=dialog.setbln)
async def setbbb(message: types.Message, state: FSMContext):
   if message.text == '–ù–∞–∑–∞–¥':
    await message.answer("–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", reply_markup=Keyboard.admin)
    await state.finish()
   else:
      answer = message.text
      await state.update_data(user_id=answer)
      await dialog.newbln.set()
      await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –±–∞–ª–∞–Ω—Å –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", reply_markup=Keyboard.back)
        
@dp.message_handler(state=dialog.newbln)
async def nblnc(message: types.Message, state: FSMContext):
  answer = message.text
  await state.update_data(newbalance=answer)
  if message.text == '–ù–∞–∑–∞–¥':
    await message.answer("–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", reply_markup=Keyboard.admin)
    await state.finish()
  else:
    data = await state.get_data()
    user_id = data.get("user_id")
    balance = data.get("newbalance")
    try:
        db.setb(balance, user_id)
        await state.finish()
        await message.answer("–í—ã–ø–æ–ª–Ω–µ–Ω–æ", reply_markup=Keyboard.admin)
    except:
      await state.finish()
      await message.answer("–û—à–∏–±–∫–∞!")

#@dp.message_handler()
#async def echo_message(msg: types.Message):
#    await bot.send_message(msg.from_user.id, msg.text)
@dp.message_handler(commands=['gadm'])
async def process_guveadmin_command(message: types.Message):
  admin = message.text[17:]
  user_id = message.text[6:-2]
  c.execute("UPDATE users SET admin = ? WHERE user_id = ?", (admin, user_id,))
  conn.commit()
  await message.answer("–í—ã–ø–æ–ª–Ω–µ–Ω–æ")
  
  
  
if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)
